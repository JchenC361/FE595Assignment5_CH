from sklearn import datasets
from sklearn.model_selection import cross_val_predict
from sklearn import linear_model
import matplotlib.pyplot as plt
import matplotlib.cm
import pandas as pd
import numpy as np

# Call linear regression function
lr = linear_model.LinearRegression()
# Get load_boston datasets
boston = datasets.load_boston()
y = boston.target

# Use PRICE to save the prices of each record from boston datasets
PRICE = boston.target
# Grasp values of all attribute with respect to every record in dataset.
CRIM = boston.data[:, np.newaxis, 0]
ZN = boston.data[:, np.newaxis, 1]
INDUS = boston.data[:, np.newaxis, 2]
CHAS = boston.data[:, np.newaxis, 3]
NOX = boston.data[:, np.newaxis, 4]
RM = boston.data[:, np.newaxis, 5]
AGE = boston.data[:, np.newaxis, 6]
DIS = boston.data[:, np.newaxis, 7]
RAD = boston.data[:, np.newaxis, 8]
TAX = boston.data[:, np.newaxis, 9]
PTRATIO = boston.data[:, np.newaxis, 10]
B = boston.data[:, np.newaxis, 11]
LSTAT = boston.data[:, np.newaxis, 12]

# Create a color list to figure out different fit lines.
colour = []
colour.append("#5F9EA0")
colour.append("#7FFF00")
colour.append("#D2691E")
colour.append("#FF7F50")
colour.append("#6495ED")
colour.append("#FFF8DC")
colour.append("#DC143C")
colour.append("#00FFFF")
colour.append("#00008B")
colour.append("#008B8B")
colour.append("#B8860B")
colour.append("#A9A9A9")
colour.append("#2E8B57")


# Define function to plot the regression line with respect to one attribute and the price
def plot_regression(boston_x, colour):
    bos = datasets.load_boston()
    boston_x_train = boston_x
    boston_x_test = boston_x[-506:]
    boston_y_train = bos.target
    boston_y_test = bos.target[-506:]
    regr = linear_model.LinearRegression()
    regr.fit(boston_x_train, boston_y_train)
    boston_y_pred = regr.predict(boston_x_test)
    plt.scatter(boston_x_test, boston_y_test, color='black')
    plt.plot(boston_x_test, boston_y_pred, color=str(colour), linewidth=3)
    plt.xticks(())
    plt.yticks(())
    plt.show()

# Plot lines based on the regrssion of price and one of twelve attributes from objects generated by function load_boston
plot_regression(CRIM, colour[0])
plot_regression(ZN, colour[1])
plot_regression(INDUS, colour[2])
plot_regression(CHAS, colour[3])
plot_regression(NOX, colour[4])
plot_regression(RM, colour[5])
plot_regression(AGE, colour[6])
plot_regression(DIS, colour[7])
plot_regression(RAD, colour[8])
plot_regression(TAX, colour[9])
plot_regression(PTRATIO, colour[10])
plot_regression(B, colour[11])
plot_regression(LSTAT, colour[12])


# Calculate the value of slope for each attribute
reg = []
reg.append(lr.fit(CRIM, y))
reg.append(lr.fit(ZN, y))
reg.append(lr.fit(INDUS, y))
reg.append(lr.fit(CHAS, y))
reg.append(lr.fit(NOX, y))
reg.append(lr.fit(RM, y))
reg.append(lr.fit(AGE, y))
reg.append(lr.fit(DIS, y))
reg.append(lr.fit(RAD, y))
reg.append(lr.fit(TAX, y))
reg.append(lr.fit(PTRATIO, y))
reg.append(lr.fit(B, y))
reg.append(lr.fit(LSTAT, y))

# Calculate the value of slope for each attribute and save the result in a dictionary variable.
dictionary = {
"CRIM":lr.fit(CRIM, y).coef_,
"ZN":lr.fit(ZN, y).coef_,
"INDUS":lr.fit(INDUS, y).coef_,
"CHAS":lr.fit(CHAS, y).coef_,
"NOX":lr.fit(NOX, y).coef_,
"RM":lr.fit(RM, y).coef_,
"AGE":lr.fit(AGE, y).coef_,
"DIS":lr.fit(DIS, y).coef_,
"RAD":lr.fit(RAD, y).coef_,
"TAX":lr.fit(TAX, y).coef_,
"PTRATIO":lr.fit(PTRATIO, y).coef_,
"B":lr.fit(B, y).coef_,
"LSTAT":lr.fit(LSTAT, y).coef_
}


# Display the slope value extracted from python console.

# 'CRIM': -0.41519028
# 'ZN': 0.14213999
# 'INDUS': -0.64849005
# 'CHAS': 6.34615711
# 'NOX': -33.91605501
# 'RM': 9.10210898
# 'AGE': -0.12316272
# 'DIS': 1.09161302
# 'RAD': -0.4030954
# 'TAX': -0.0255681
# 'PTRATIO': -2.1571753
# 'B': 0.03359306
# 'LSTAT': -0.95004935

# Display the intercept value extracted from python console.

# 'CRIM': 24.03310617412388,
# 'ZN': 20.917579117799832,
# 'INDUS': 29.754896511928493,
# 'CHAS': 22.093842887473464,
# 'NOX': 41.345874467973246,
# 'RM': -34.67062077643857,
# 'AGE': 30.97867776261804,
# 'DIS': 18.390088330493384,
# 'RAD': 26.382128362272397,
# 'TAX': 32.97065449366631,
# 'PTRATIO': 62.34462747483266,
# 'B': 10.551034138417158,
# 'LSTAT': 34.55384087938311


# Pick up the two value we need.

# The Greatest: NOX
# The Least: TAX
